if (rootProject.ext.isMoudleB) {
    apply plugin: 'com.android.library'
} else {
    apply plugin: 'com.android.application'
}

def cfg = rootProject.ext.android
def appIds = rootProject.ext.appIds

android {
    compileSdkVersion cfg.compileSdkVersion
    buildToolsVersion cfg.buildToolsVersion

    defaultConfig {
        minSdkVersion cfg.minSdkVersion
        targetSdkVersion cfg.targetSdkVersion
        versionCode cfg.versionCode
        versionName cfg.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'

        // 组件化配置
        buildConfigField("boolean","isModuleB",String.valueOf(rootProject.ext.isMoudleB))
        if (!rootProject.ext.isMoudleB) {
            applicationId appIds['moduleB']
        }

        sourceSets {
            main {
                if(!rootProject.ext.isMoudleB){
                    manifest.srcFile 'src/main/module/AndroidManifest.xml'
                    java.srcDirs 'src/main/module/java','src/main/java'
                }else{
                    manifest.srcFile 'src/main/AndroidManifest.xml'
                }
            }
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName : project.getName()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation project(path: ':base')
    annotationProcessor project(":solarexrouter-compiler")
}
